// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     writer.avsc
 */
package writer

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Foo struct {
	F0 []Bar `json:"f0"`

	F1 []int32 `json:"f1"`

	F2 []string `json:"f2"`
}

const FooAvroCRC64Fingerprint = "\x1f\xc05k\xde\xef\x11\x13"

func NewFoo() Foo {
	r := Foo{}
	r.F0 = make([]Bar, 0)

	r.F1 = make([]int32, 0)

	r.F2 = make([]string, 0)

	return r
}

func DeserializeFoo(r io.Reader) (Foo, error) {
	t := NewFoo()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeFooFromSchema(r io.Reader, schema string) (Foo, error) {
	t := NewFoo()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeFoo(r Foo, w io.Writer) error {
	var err error
	err = writeArrayBar(r.F0, w)
	if err != nil {
		return err
	}
	err = writeArrayInt(r.F1, w)
	if err != nil {
		return err
	}
	err = writeArrayString(r.F2, w)
	if err != nil {
		return err
	}
	return err
}

func (r Foo) Serialize(w io.Writer) error {
	return writeFoo(r, w)
}

func (r Foo) Schema() string {
	return "{\"fields\":[{\"name\":\"f0\",\"type\":{\"items\":{\"fields\":[{\"name\":\"x\",\"type\":\"int\"}],\"name\":\"escid.esdp.Bar\",\"type\":\"record\"},\"type\":\"array\"}},{\"name\":\"f1\",\"type\":{\"items\":\"int\",\"type\":\"array\"}},{\"name\":\"f2\",\"type\":{\"items\":\"string\",\"type\":\"array\"}}],\"name\":\"escid.esdp.Foo\",\"type\":\"record\"}"
}

func (r Foo) SchemaName() string {
	return "escid.esdp.Foo"
}

func (_ Foo) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Foo) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Foo) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Foo) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Foo) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Foo) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Foo) SetString(v string)   { panic("Unsupported operation") }
func (_ Foo) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Foo) Get(i int) types.Field {
	switch i {
	case 0:
		r.F0 = make([]Bar, 0)

		w := ArrayBarWrapper{Target: &r.F0}

		return w

	case 1:
		r.F1 = make([]int32, 0)

		w := ArrayIntWrapper{Target: &r.F1}

		return w

	case 2:
		r.F2 = make([]string, 0)

		w := ArrayStringWrapper{Target: &r.F2}

		return w

	}
	panic("Unknown field index")
}

func (r *Foo) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Foo) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Foo) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Foo) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Foo) HintSize(int)                     { panic("Unsupported operation") }
func (_ Foo) Finalize()                        {}

func (_ Foo) AvroCRC64Fingerprint() []byte {
	return []byte(FooAvroCRC64Fingerprint)
}

func (r Foo) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["f0"], err = json.Marshal(r.F0)
	if err != nil {
		return nil, err
	}
	output["f1"], err = json.Marshal(r.F1)
	if err != nil {
		return nil, err
	}
	output["f2"], err = json.Marshal(r.F2)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Foo) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["f0"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.F0); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for f0")
	}
	val = func() json.RawMessage {
		if v, ok := fields["f1"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.F1); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for f1")
	}
	val = func() json.RawMessage {
		if v, ok := fields["f2"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.F2); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for f2")
	}
	return nil
}
