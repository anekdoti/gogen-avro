// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     writer.avsc
 */
package writer

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Bar struct {
	X int32 `json:"x"`
}

const BarAvroCRC64Fingerprint = "\x19!~\xf7%\xb1\x83\x97"

func NewBar() Bar {
	r := Bar{}
	return r
}

func DeserializeBar(r io.Reader) (Bar, error) {
	t := NewBar()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeBarFromSchema(r io.Reader, schema string) (Bar, error) {
	t := NewBar()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeBar(r Bar, w io.Writer) error {
	var err error
	err = vm.WriteInt(r.X, w)
	if err != nil {
		return err
	}
	return err
}

func (r Bar) Serialize(w io.Writer) error {
	return writeBar(r, w)
}

func (r Bar) Schema() string {
	return "{\"fields\":[{\"name\":\"x\",\"type\":\"int\"}],\"name\":\"escid.esdp.Bar\",\"type\":\"record\"}"
}

func (r Bar) SchemaName() string {
	return "escid.esdp.Bar"
}

func (_ Bar) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Bar) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Bar) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Bar) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Bar) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Bar) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Bar) SetString(v string)   { panic("Unsupported operation") }
func (_ Bar) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Bar) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Int{Target: &r.X}

		return w

	}
	panic("Unknown field index")
}

func (r *Bar) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Bar) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Bar) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Bar) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Bar) HintSize(int)                     { panic("Unsupported operation") }
func (_ Bar) Finalize()                        {}

func (_ Bar) AvroCRC64Fingerprint() []byte {
	return []byte(BarAvroCRC64Fingerprint)
}

func (r Bar) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["x"], err = json.Marshal(r.X)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Bar) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["x"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.X); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for x")
	}
	return nil
}
